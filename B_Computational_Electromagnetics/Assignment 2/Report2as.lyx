#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.25cm
\topmargin 1.25cm
\rightmargin 1.25cm
\bottommargin 1.25cm
\headheight 1.25cm
\headsep 1.25cm
\footskip 1.25cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Week 2:FDM Applied to Solve Laplace Equation
\begin_inset Newline newline
\end_inset

for Systems with Finite Boundary Conditions
\end_layout

\begin_layout Author
Sankeerth.D
\begin_inset Newline newline
\end_inset

EE13B102
\begin_inset Newline newline
\end_inset

Electrical Engineering
\end_layout

\begin_layout Abstract
Finite Difference Method (FDM), used to numerically solve differential equations
 by approximating derivatives as differences.
 Here, it is used to solve an 2D electrostatic problem where one edge of
 a rectangle is given a nonzero voltage and the other three edges are grounded.
 The simulation has been performed in MATLAB, where two approaches have
 been used to calculate the iterations.
 Analysis of the simulation have also been done.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
FDM approximates the second derivative at a point as the average of the
 four surrounding points:
\end_layout

\begin_layout Description
\begin_inset Formula 
\[
\nabla^{2}V=0
\]

\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula 
\[
V_{i,j}=\frac{V_{i,j-1}+V_{i,j+1}+V_{i-1,j}+V_{i+1,j}}{4}
\]

\end_inset


\end_layout

\begin_layout Standard
At the boundary, the V value is not updated.
 The given area is split into a rectangular grid of points, and the derivative
 can be computed at these points using the above approximation.
 These above conditions can be put into an algorithm.
\end_layout

\begin_layout Section
Simple capacitor cross section segment
\end_layout

\begin_layout Standard
In this case, a close up of the cross section of the capacitor has been
 considered and neumann conditions (set to 0) have been applied at the edges.
 As a result, no fringing in the field can be observed.
 Dirichlet conditions of +10V and 0V have been applied on the top and bottom
 plate of the capacitor, and laplace equation has been solved.
\end_layout

\begin_layout Section
Observation
\end_layout

\begin_layout Standard
Both the algorithms converge and yield reasonable solutions.
 The iterations have been carried out for the number of points ranging from
 20X20 to 100X100, at steps of 5.
 The numerical solution obtained is as follows (for a 100X100 grid):
\end_layout

\begin_layout Standard
The normallized Electric Field with its direcrtion is as shown(taken from
 solution for 30X30 grid):
\end_layout

\begin_layout Standard
As one can notice, the boundary conditions are satisfied as the electric
 field is perpendicular to the edges.
\end_layout

\begin_layout Section
Analysis of algorithms
\end_layout

\begin_layout Standard
When using the for loop algorithm, the following time and number of iterations
 characteristics are obtained with respect to grid size(on one axis):
\end_layout

\begin_layout Standard
As one can see, it takes around 2 seconds to run through around 1500 iterations
 for a 100X100 grid.
\end_layout

\begin_layout Standard
For the second algorithm, the corresponding time and number of iterations
 characteristics versus the grid size is as follows:
\end_layout

\begin_layout Standard
Even the 100X100 grid takes 0.35 millisecconds on the second algorithm, which
 ran 1850 iterations.
\end_layout

\begin_layout Section
Result and Discussion
\end_layout

\begin_layout Standard
From the graphs, using the for loop algorithm, the time taken varies almost
 parabolically with the grid size, that is, it grows linerly with the number
 of grid points.
 This seems reasonable as each time it iterates through each point inside
 the for loop.
 Also, since the for loop is inefficient in MATLAB, it's effect can be observed
 as it takes a full 2 seconds to compute solution for the 100X100 grid.
\end_layout

\begin_layout Standard
As with the other case, as expecte, it has many number of iterations than
 the first one, but it has much lesser execution time, around 0.3 seconds
 even for the 100X100 case, since it was done sing the matrix operations
 offered my MATLAB.
 Also, it an be seen, the execution time is closer to a linear graph in
 this case, unlike the squared case in the one above.
 
\end_layout

\end_body
\end_document
